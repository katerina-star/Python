"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]
array = [1, 3, 1, 9, 9, 9, 9, 3, 4, 5, 1]


def func_1():
@@ -39,5 +40,24 @@ def func_2():
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    max_count = max(array, key=array.count)
    return f'Чаще всего встречается число {max_count}, ' \
           f'оно появилось в массиве {array.count(max_count)} раз(а)'


print(func_3())
print(func_1())
print(func_2())

print('Первая функция выролняется :', timeit('func_1()', globals=globals()))
print('Вторая функция выролняется :', timeit('func_2()', globals=globals()))
print('Третья функция выролняется :', timeit('func_3()', globals=globals()))

'''
Самая долгая функция 2 в ней выполняется больше всего действий таких как поиск индексов добовление в список 
Первая функция чуть быстрее так как в ней чуть меньше действий и она переопределяет максималоное количество повторений
по продвижению в цикле но если проходить по циклу set(array) то она ускорится в разы так как кол-во проходов уменьшится
Третья функция чуть быстрее первой так как по сути в ней функция max отбирает по ключу array.count но она выполняет 
при возврате array.count(max_count) и из-за этого чуть дольше выполняется.